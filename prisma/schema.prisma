generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(cuid())
  walletAddress    String        @unique
  email            String?
  name             String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  type             UserType      @default(RECIPIENT)
  balances         Balance[]
  payerStreams     Stream[]      @relation("PayerStreams")
  recipientStreams Stream[]      @relation("RecipientStreams")
  transactions     Transaction[]

  @@index([walletAddress])
}

model Stream {
  id              String        @id @default(cuid())
  payerId         String
  recipientId     String
  tokenAddress    String
  flowRate        String
  totalAmount     String
  withdrawnAmount String        @default("0")
  status          StreamStatus  @default(ACTIVE)
  startTime       DateTime      @default(now())
  endTime         DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  escrowConfirmed Boolean       @default(false)
  payer           User          @relation("PayerStreams", fields: [payerId], references: [id], onDelete: Cascade)
  recipient       User          @relation("RecipientStreams", fields: [recipientId], references: [id], onDelete: Cascade)
  transactions    Transaction[]

  @@index([payerId])
  @@index([recipientId])
  @@index([status])
  @@index([startTime])
}

model Transaction {
  id          String            @id @default(cuid())
  streamId    String?
  type        TransactionType
  amount      String
  txHash      String?           @unique
  status      TransactionStatus @default(PENDING)
  fromAddress String
  toAddress   String
  createdAt   DateTime          @default(now())
  completedAt DateTime?
  user        User              @relation(fields: [fromAddress], references: [walletAddress], onDelete: Cascade)
  stream      Stream?           @relation(fields: [streamId], references: [id], onDelete: Cascade)

  @@index([streamId])
  @@index([txHash])
  @@index([status])
  @@index([createdAt])
}

model Balance {
  id               String   @id @default(cuid())
  userId           String
  tokenAddress     String
  totalEarned      String   @default("0")
  totalWithdrawn   String   @default("0")
  availableBalance String   @default("0")
  lastUpdated      DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tokenAddress])
  @@index([userId])
  @@index([tokenAddress])
}

enum UserType {
  PAYER
  RECIPIENT
}

enum StreamStatus {
  ACTIVE
  PAUSED
  STOPPED
  COMPLETED
  PENDING
}

enum TransactionType {
  STREAM_START
  STREAM_STOP
  WITHDRAWAL
  DEPOSIT
  ESCROW_DEPOSIT
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
}
